# encoding=utf-8
import os
import os.path
import re
import time
import ConfigParser
import pickle
# to remove directory and files in it, dangerous operation:
import shutil

## For windows, do not end folder name with '/' !
# settings:
base_folder            = 'e:/evid'
base_folder = os.path.normpath(base_folder)

config_filename       = os.path.join(base_folder, 'robot.cfg')

config = ConfigParser.ConfigParser()
config.read(config_filename)

log_filename           = config.get('basics', 'log_filename')
log_filename           = os.path.join(base_folder, log_filename)

chinese_title_filename = config.get('basics', 'chinese_title_filename')
#chinese_title_filename = os.path.join(base_folder, chinese_title_filename)

todo_filename          = config.get('basics', 'todo_filename')
#todo_filename          = os.path.join(base_folder, todo_filename)



def writelog(msg=''):
    with open(log_filename, 'a+') as logfile:
        logfile.write ( "\n")
        logfile.write ( get_asctime() )
        logfile.write ( "\n")
        logfile.write ( msg)
        logfile.write("\n")
    pass


##### Video File Providor Class

import os
import shelve
import pickle

picklefile = 'd:/tmp/pfile'
basepath = "/tmp/vt"  #testing
basepath = "d:/myvid"

# The file descript videos in one folder
video_info_file_name = 'cname'
# The delimit in the video_info_file_name
vi_delimit = '---goodagood-video-info-delimit---'

class VideoFileProvidor(object):
    def __init__(self, basepath=basepath, picklefile=picklefile):
        self.basepath = os.path.normpath(basepath)
        self.picklefile = os.path.normpath(picklefile)

        self.todo = []
        self.done = []

        self.current_file = None
        self.current_file_state = ''

        ## when deploy, remove the no-video file extension:
        self.video_file_exts = ['flv', 'webm', 'mp4']
        #'text','png','md','html']

        self.add_files()
        pass

    def __str__(self):
        todolen = len(self.todo)
        donelen = len(self.done)

        string = "\nbasepath: %s\n"%self.basepath
        string += "todo file list: total %s\n"% todolen
        if todolen > 3:
            string += "0, : %s \n"%self.todo[0]
            string += "1, : %s \n"%self.todo[1]
            string += "...... total %s\n"% todolen
            string += "%i, : %s \n"%(todolen-1, self.todo[todolen-1])
        else:
            for f in self.todo:
                string += " : %s \n"%f

        string += "done file list: total %i files.\n"% donelen
        if donelen > 3:
            string += "0, : %s \n"%self.done[0]
            string += "1, : %s \n"%self.done[1]
            string += "...... total %s\n"% donelen
            string += "%i, : %s \n"%(donelen-1, self.done[donelen-1])
        else:
            for f in self.done:
                string += " : %s \n"%f

        return string


    def change_basepath(self, newbase):
        if self.basepath == newbase:
            return False
        if os.path.isdir(newbase):
            self.basepath = newbase
            self.add_files()
            self.check_file_list()
            return True
        return False


    def is_video_file(self, filename):
        if not filename:
            return False
        for ext in self.video_file_exts:
            if filename.lower().endswith(ext):
                return True

        return False


    def make_all_file_list(self):
        all_file_list  = set(self.todo + self.done)
        all_file_list  = list(all_file_list)
        return all_file_list


    def add_files(self):
        all_file_list = self.make_all_file_list()
        new_file_list = []
        for (path, dirs, files) in os.walk(self.basepath):
            for f in files:
                fullfilename = os.path.join(path, f)
                if all_file_list.count(fullfilename):
                    # the file already in the lists, jump to next
                    continue
                else:
                    if self.is_video_file(fullfilename):
                        new_file_list.append( fullfilename )

        self.todo.extend(new_file_list)

        if not self.current_file:
            self.pop_one_full_filename()

        self.pickle_self()  #?
        pass

    def check_file_list(self):
        # remove duplication from self.todo
        self.todo = list( set(self.todo))

        to_remove = []
        for f in self.todo:
            if not os.path.isfile(f):
                to_remove.append(f)
                pass
            pass
        for f in to_remove:
            self.todo.remove(f)
            pass

        for f in self.done:
            if not os.path.isfile(f):
                to_remove.append(f)
                pass
            pass
        for f in to_remove:
            self.done.remove(f)
            pass

        self.add_files()



    def pickle_self(self):
        with open(picklefile, 'wb') as pf:
            pickle.dump(self, pf)
            pass
        pass


    # Another way is to report in fail, but actually, 
    # we can't report when dead.  So, no report, no done.
    def report_job_done(self, vfile = None):
        if  vfile is None:
            self.current_file_state = 'ok'
        else:
            self.done.append(vfile)
            try:
                self.todo.remove(vfile)
            except:
                return "It isn't in todo list: %s"%vfile
            pass
        return 'ok'


    def drop_current_file(self):
        # falsely report job done:
        self.report_job_done()
        # then pop another file out:
        self.pop_one_full_filename()


    def pop_one_full_filename(self):
        if self.current_file :
            if self.current_file_state == 'ok':
                self.done.append(self.current_file)
            else:
                self.todo.append(self.current_file)

        self.current_file_state = None

        one = self.todo.pop(0)
        self.current_file = one

        self.pickle_self()
        return one


    def clear_one_folder(self, folder='/tmp/'):
        """Clear all files from the folder from self.todo list.
        """
        to_remove = []
        for f in self.todo:
            if self.is_in_folder(f, folder):
                to_remove.append(f)

        for f in to_remove:
            self.todo.remove(f)
        pass


    def is_in_folder(self, filename, folder='/tmp/'):
        fn = os.path.normpath(filename)
        fd = os.path.normpath(folder)
        commonprefix = os.path.commonprefix([fn, fd])
        if commonprefix == fd:
            sufix_part = fn.replace(fd, '')
            sufix_part = sufix_part.lstrip('/')
            new_file_name = os.path.join(fd, sufix_part)
            if new_file_name == fn:
                return True
            pass
        return False



    ## 
    def get_video_info(self, fullfilename):
        #
        """
        specification: file: cname, '---goodagood-video-info-delimit---'
        """
        # the fullfilename is the video's filename
        video_info_file = self._find_info_file(fullfilename)
        #print "video_info_file: %s \n"%video_info_file
        #print self.read_chinese_title(video_info_file, fullfilename)
        if video_info_file:
            return self.read_chinese_title(video_info_file, fullfilename)
        else:
            return None

        #todo
        pass

    def _find_info_file(self, fullfilename):
        path, filename = os.path.split(fullfilename)
        cname_file = os.path.join(path, video_info_file_name)
        if os.path.isfile(cname_file):
            return cname_file
        else:
            return None
        pass


    ## get video description of the video from file video_info_file_name
    # -The format of the file 'info_filename' ('cname')is: 
    #      first line of file name, 
    #      followed by a line of Chinese title, 
    #      followed by lines of Chinese description, English description
    #      and delimit will in separate line.
    ##
    def read_chinese_title(self, info_filename, abs_vfn):
        """read chinese title from 'info_filename' file.

        info_filename : the file contains chinese title for each video file.
        abs_vfn : abs video filename
        """
        with open(info_filename, 'rb') as afile:
            file2str = afile.read()
            pass
        if not file2str:
            return None

        vfn = os.path.basename(abs_vfn)

        start = file2str.find(vfn)
        rest  = file2str[start:]
        end   = rest.find(vi_delimit)
        info  = rest[:end]
        info  = info.strip()

        lines = info.splitlines()
        #print "%i lines : %s \n"%(len(lines), "\n".join(lines))
        # filter out empty lines:
        no_empty_lines = filter( lambda x: x.strip(), lines)

        #filename = no_empty_lines[0]
        if len(no_empty_lines)>2:
            ctitle   = no_empty_lines[1]
        else:
            ctitle = abs_vfn

        if len(no_empty_lines)>3:
            lang = no_empty_lines[2]
        else:
            lang = 'unknown lang'

        if len(no_empty_lines)>3:
            description = "\n".join(no_empty_lines[2:])
        else:
            description = ctitle

        return ctitle, lang, description






def get_file_provider(basepath = basepath, picklefile = picklefile):
    if os.path.isfile(picklefile):
        with open(picklefile)as f:
            fileprovider = pickle.load(f)
            if fileprovider.basepath != basepath:
                fileprovider.change_basepath(basepath)
            fileprovider.check_file_list()
        pass
    else:
        fileprovider = VideoFileProvidor()
        pass

    return fileprovider



'''
fp = get_file_provider()
#print fp
#print fp.is_in_folder('/tmp/aac', '/tmp/')
fnb = fp.pop_one_full_filename()
vinfo = fp.get_video_info(fnb)


fp.add_files()
print fp
'''


##### buff of 30 files:

picklefile = os.path.normpath('c:/tmp/pfile')
#popup(picklefile)  # testa
video_path = os.path.normpath("e:/evid")
#popup(video_path)  # testa

class Bufof30(object):
    def __init__(self):
        self.basepath = video_path
        self.todo = []
        self.done = []
        self.all  = self.update_all_list()

        self.max = 30
        self.add_files()
        pass

    def __str__(self):
        todolen = len(self.todo)
        donelen = len(self.done)

        string = "\nbasepath: %s\n"%self.basepath
        string += "todo file list: total %s\n"% todolen
        if todolen > 3:
            string += "0, : %s \n"%self.todo[0]
            string += "1, : %s \n"%self.todo[1]
            string += "...... total %s\n"% todolen
            string += "%i, : %s \n"%(todolen, self.todo[todolen-1])
        else:
            for f in self.todo:
                string += " : %s \n"%f

        string += "done file list: total %i files.\n"% donelen
        if donelen > 3:
            string += "0, : %s \n"%self.done[0]
            string += "1, : %s \n"%self.done[1]
            string += "...... total %s\n"% donelen
            string += "%i, : %s \n"%(donelen, self.done[donelen-1])
        else:
            for f in self.done:
                string += " : %s \n"%f

        return string


    def rm_all_finished(self):
        length = len(self.done)
        for i in range(length):
            f = self.done.pop(0)
            os.remove(f)
            #print "os.remove(%s) \n"%f
        self.all  = self.update_all_list()


    def rm_half_finished(self):
        half = len(self.done)/2
        for i in range(half):
            f = self.done.pop(0)
            try:
                os.remove(f)
            except:
                writelog("os.remove exception %s"%f)
            #print "os.remove(%s) \n"%f
        self.all  = self.update_all_list()


    def keep_size(self):
        if len(self.done) > (self.max+15) : # the file might in uploading
            self.rm_half_finished()
            pass
        if len(self.todo) < (self.max/2) :
            self.add_files()
            pass
        self.all  = self.update_all_list()
        self.pickle_self()
        pass


    def update_all_list(self):
        self.all  = set(self.todo + self.done)
        self.all  = list(self.all)
        return self.all


    def is_video_file(self, filename):
        if filename.endswith('webm'):
            return True
        if filename.endswith('flv'):
            return True
        if filename.endswith('mp4'):
            return True
        #popup("%s not endswith webm"%filename)
        return False


    def add_files(self):

        #popup('add-files')


        for (path, dirs, files) in os.walk(self.basepath):

        #for (path, dirs, files) in os.walk("d:\\myvid"): 
            '''
            popup('in  add-files')
            print "path: %s"%path
            print "dirs: %s"%dirs
            print "files: %s"%files
            '''

            for f in files:
                if len(self.todo) < self.max:
                    fullfilename = os.path.join(path, f)
                    if self.all.count(fullfilename):
                        # the file already in the lists, jump to next
                        continue
                    else:
                        if self.is_video_file(fullfilename):
                            self.todo.append( fullfilename )
                else:
                    return
        self.all  = self.update_all_list()
        self.pickle_self()
        pass

    def pickle_self(self):
        with open(picklefile, 'wb') as pf:
            pickle.dump(self, pf)
            pass
        pass

    def get_one_full_filename(self):
        if not self.todo:
            return None
        one = self.todo.pop(0)
        self.done.append(one)
        self.keep_size()
        return one

    pass


def get_file_provider(picklefile = picklefile):
    if os.path.isfile(picklefile):
        with open(picklefile)as f:
            fileprovider = pickle.load(f)
        pass
    else:
        fileprovider = Bufof30()
        pass

    return fileprovider



'''
if __name__ == '__main__':
    fp = get_file_provider()
    print fp
'''


def set_working_log(section='working_log', name='wlogging', content=''):
    config.set(section, name, content)

def write_working_log():
    with open(config_filename, 'wb') as conffile:
        config.write(conffile)
    pass

'''
log_filename           = os.path.join(base_folder, 'sikulilog')
chinese_title_filename = 'cname'
todo_filename          = 'cname.todo'
'''

# make a unique and readable logfile name
def get_asctime():
    asct = time.asctime()
    #ascta = asct.replace(' ', '_')
    return asct

## Stop using 'cname_file', this file contains file name and Chinese title
#  pairs.  It would be easy to put this file inside the same folder of the
#  video files.  
# -Make it a hard specification to name the file as 'cname', and put inside
#  the folder of video files.
# -It would be more convinient to write a working file 'cname.todo', it
#  will contain the _todo_ things. 
# -Remove the video file after uploading, this will save a lot trivial manual
#  jobs, and free disk space for more file uploading.
##



def appendlog(fullfilename, msg=''):
    with open(fullfilename, 'a+') as logfile:
        logfile.write ( "\n")
        logfile.write ( msg)
        logfile.write("\n")
    pass


# deperacated, 0322
## get video file names and chinese names of the video from file 'cname?'
# -The format of the file 'cname' is: 
#      first line of file name, 
#      followed by a line of Chinese title,
#      and empty line(s).
##
def chop_to_filename_ctitle_pieces(cname_file):
    with open(cname_file) as afile:
        file2str = afile.read()
        pass
    if not file2str:
        return []


    # One line file name, followed by one line Chinese video title, followed
    # by empty line(s):
    todos = re.split(r'\n[\n\s]*\n', file2str)

    # chop the file text to piece of one file name plus chinese name of the
    # video
    chops = []

    for p in todos:
        lines = p.split('\n')
        # filter out empty lines:
        my_lines = filter( lambda x: x.strip(), lines)

        # 1 line: name of the file
        # 2 line: chinese name of it
        # If it's not two lines pair, we drop it:
        if len(my_lines) == 2:
            one = dict(name=my_lines[0], cname=my_lines[1])
            chops.append(one)
        pass

    return chops

#def is_over3_and_check_fails():
def check_fails():
    # there are 2 bypa  job, the last is  named job according the name.
    while exists(Pattern("1364905880031.png").similar(0.91).targetOffset(52,-1)):
        click(Pattern("1364905880031.png").similar(0.91).targetOffset(52,-1))
        ''' The following will cancel the fails
        click(Pattern("1364905880031.png").similar(0.91).targetOffset(92,-1))
        wait(5)
        if exists("liIHF.png"):
            click("liIHF.png")
        '''
        pass
    
    while exists("ZIFE.png"): #56ican reload and lost
        click("ZIFE.png")

    # put mouse away
    if exists("mh1li.png"):  
        click("mh1li.png")
    
    # 3 files make 56ican fail a  lot?
    #exists("1364921878409.png")
    


def too_many_uploading():
    if exists(Pattern("1364905849325.png").similar(0.86)):
        return True

    if not exists("QEDIiii.png"): #not enough space, it's too many
        return True

    return False

def enter_filename(fullfilename):
    click("filename_input.png")
    type(fullfilename)
    type(Key.ENTER)
    wait(2)

    #this means error, clear the window and return False, by click 'cancel'
    if exists(Pattern("Mmma.png").exact()):  
        click("Mmma.png")
        return False
    return True

def enter_video_name(name='name'):
    click(Pattern("BFJ1RiEE1E.png").targetOffset(0,35))
    type('a', KeyModifier.CTRL)
    type(Key.BACKSPACE)
    paste(name)


def upload_one_file(fullfilename, filename, cname, long_cname=''):
    # start to upload new file, click 'select file':
    if exists("select_filea.png"):
        click("select_filea.png")
        wait(1)
        pass
    elif exists("lN3ZE1tbXiJZ.png"):
        click("lN3ZE1tbXiJZ.png")
        wait(1)
        pass
    else:
        exit(11)
        pass
   
    if not enter_filename(fullfilename):
        return False

    # click the last 'enter information':
    if exists(Pattern("1364505416136.png").exact()):  # can be improved to get the last.
        click(Pattern("1364505416136.png").exact().targetOffset(0,-33))
      

    wait("tag_input.png", 38)
    

    click("tag_input.png")
    type('goodagood')

    
    if exists("intro_input.png"):
        click("intro_input.png")
        paste(long_cname)
        pass  
    
    if exists("edu_vtag.png"):
        click("edu_vtag.png")  
        wait(1)
        pass

    # actually I'm not using chinese name any more, 'cname' is video file name after a few refits.
    enter_video_name(cname)
    #save
    click(Pattern("IEEQH13WsZEE.png").similar(0.88).targetOffset(95,35))

    check_save()
    return 'finished'


def check_save():
    ## check again:
    if exists(Pattern("IEEQH13WsZEE.png").similar(0.88).targetOffset(95,35)):
        if exists("F2iiziIEEQH1.png"):
            click(Pattern("F2iiziIEEQH1.png").targetOffset(-79,-33))
    
    
        if exists("igqysewVgiii.png"):
            click("1364490012568.png")
            type('goodagood')
            pass
        
        click(Pattern("IEEQH13WsZEE.png").similar(0.88).targetOffset(95,35))
        pass

def check_auto_comeup_missing_info_dialog():
    ## some missing info, the dialog will comeup again after uploading:
    if exists(Pattern("IEEQH13WsZEE.png").similar(0.88).targetOffset(95,35)):
    
        click("tag_input.png")
        type('goodagood')
        
        if exists("edu_vtag.png"):
            click("edu_vtag.png")  
            wait(1)
            pass
        click(Pattern("IEEQH13WsZEE.png").similar(0.88).targetOffset(95,35))   
        wait(1)
        check_save()


    
def close_finished():    
    while(exists(Pattern("1001Ds-1.png").similar(0.84).targetOffset(213,1))):
        click(Pattern("1001Ds-1.png").targetOffset(213,1))
        wait(3)
    
    return 'finished'


    
    
    
    
    
    
    
    
    



    

def write_todo_file(content_start, dir_start, contents):
    base       = filedirs[dir_start]['basedir']
    todo_file = base + todo_filename

    with open(todo_file, 'w+') as todo:
        for c in contents[content_start+1: ]:
            todo.write( "%s\n%s\n\n"%(c['name'], c['cname']))
    pass


def get_new_folder(base='c:/myvid'):
    dirs_in_base_folder = [ os.path.join(base, name) for name in
            os.listdir(base) if os.path.isdir(
                os.path.join(base, name))]
    dirs_in_base_folder.sort()
    if len(dirs_in_base_folder) > 0:
        return dirs_in_base_folder[0]
    return None


def get_folder_from_working_log():
    folder = None
    try:
        folder = config.get('working_log', 'folder')
    except:
        folder = None
        pass

    if folder == 'unknown':
        return None

    folder = os.path.normpath(folder)
    return folder


def get_folder(base_folder):
    folder =  get_folder_from_working_log()
    folder = os.path.normpath(folder)
    if not folder or not os.path.isdir(folder):
        folder = get_new_folder(base_folder)

    config.set('working_log', 'folder', folder)
    write_working_log()
    return folder


def stop_signal_comes():
    stop = config.getint('basics', 'stop_at')
    if stop == 1:
        return True

    if stop == 0:
        return False
    else:
        stop = stop -1
        config.set('basics', 'stop_at', str(stop))
        write_working_log()

    return False


## get video file names and chinese names of the video from file 'cname'
# -The format of the file 'cname' is: 
#      first line of file name, 
#      followed by a line of Chinese title,
#      and empty line(s).
##
def read_chinese_title(cname):
    """read chinese title from 'cname' file.

    cname : the file contains chinese title for each video file.
    """
    with open(cname) as afile:
        file2str = afile.read()
        pass
    if not file2str:
        return []


    # One line file name, followed by one line Chinese video title, followed
    # by empty line(s):
    todos = re.split(r'\n[\n\s]*\n', file2str)

    # chop the file text to piece of 
    # one file name plus chinese name of the video
    filename_ctitle_dict = {}

    for p in todos:
        lines = p.split('\n')
        # filter out empty lines:
        my_lines = filter( lambda x: x.strip(), lines)

        # 1 line: name of the file
        # 2 line: chinese name of it
        # If it's not two lines pair, we drop it:
        if len(my_lines) == 2:
            #one = dict(name=my_lines[0], cname=my_lines[1])
            #one = {my_lines[0] : my_lines[1]}
            filename_ctitle_dict[my_lines[0]] = my_lines[1]
        pass

    return filename_ctitle_dict


def back_prepare_files(folder):
    files = os.listdir(folder)

    title_filename = os.path.join(folder, chinese_title_filename)
    kv_name_title = read_chinese_title(title_filename)

    pieces = []
    for filename in files:
        if not kv_name_title.has_key(filename):
            continue
        
        chinese_title = kv_name_title[filename]

        longtitle = chinese_title
        ctitle    = chinese_title
        if len(chinese_title) > 60:
            ctitle    = chinese_title[:58]
        if kv_name_title.has_key(filename):
            one = dict(filename      = filename,
                       chinese_title = ctitle,
                       longtitle     = longtitle,
                       fullfilename  = os.path.join(folder, filename))
            pieces.append(one)

    return pieces
    pass


# dirty and quick on windows server 2008
#def dirty_quick_files(folder):
def prepare_files(folder):
    files = os.listdir(folder)

    pieces = []
    for filename in files:
        if not filename.endswith('webm'):
            continue
        
        chinese_title = filename

        longtitle = chinese_title[:-5]
        longtitle = longtitle.replace('_', ' ')
        longtitle = longtitle.replace('quot', ' ')        
        
        ctitle    = chinese_title
        if len(chinese_title) > 60:
            ctitle    = chinese_title[:58]


        one = dict(filename      = filename,
                   chinese_title = ctitle,
                   longtitle     = longtitle,
                   fullfilename  = os.path.join(folder, filename))
        pieces.append(one)

    return pieces
    pass

def mocking(message='', duration=1, raise_exception=False):
    popup( "I am mocking...%s"%message )
    if raise_exception:
        raise Exception(message)
    time.sleep(duration)


def transfer_to_error_folder(fullfilename, filename, long_cname):
    errorv_folder = config.get('basics', 'errorv_folder')
    errorv_folder = os.path.normpath(errorv_folder)
    errorv_log = config.get('basics', 'errorv_log')
    errorv_log = os.path.normpath(errorv_log)

    newfilename = os.path.join(errorv_folder, filename)
    popup(fullfilename +" --> " + newfilename)
    os.rename(fullfilename, newfilename)

    msg = "%s\n%s"%(filename, long_cname)
    appendlog(errorv_log, msg)
    pass


def do_one_file(filename, fullfilename, cname, long_cname):
    try:
        #mocking("uploading file and remove it in success, %s %s"%(fullfilename, long_cname))

        state = ''
        while state != 'finished':
            state = upload_one_file(fullfilename, filename, cname,long_cname)
        #os.remove(fullfilename)

        #write_todo_file(j, startnumber, filename_videotitle_pairs)
    except :
        #transfer_to_error_folder(fullfilename, filename, long_cname)
        # move the file to errorv, os.rename()

        logmsg = "exception in uploading file: %s\nwith long_cname: %s \n"%(fullfilename, long_cname)
        #logmsg = logmsg + "\n" + ea.message
        writelog( logmsg)

        pass

    logmsg = "fullfilename: \n" + fullfilename + "\ncname: " + cname
    writelog( logmsg)

    pass



# replace other loops
def upload_loop():
    fp = get_file_provider()
    fp.add_files()
    print fp
    fullfilename = fp.get_one_full_filename()
    while fullfilename:
        filename = os.path.basename(fullfilename)

        long_cname = filename
        long_cname = long_cname[:-5]
        long_cname = long_cname.replace('_', ' ')
        long_cname = long_cname.replace('quot', ' ')        
        
        cname = long_cname

        #popup( fullfilename + "  " + cname)
        while too_many_uploading():
            check_auto_comeup_missing_info_dialog()
            time.sleep(5)
        do_one_file(filename, fullfilename, cname, long_cname)
        close_finished()
        if stop_signal_comes():
            print "STOP SIGNAL COMES"
            exit(0)

        fullfilename = fp.get_one_full_filename()


def do_one_folder(folder):
    # prepare file informations
    # remove empty folder
    # loop over one file uploading

    # no need to record file name, finish one, remove one, 
    # in case error happen, mv the file to 'errorv' folder, and log it.

    file_infos = prepare_files(folder)
    for fi in file_infos:
        filename = fi['filename']
        fullfilename = fi['fullfilename']
        cname = fi['chinese_title']
        long_cname = fi['longtitle']

        do_one_file(filename, fullfilename, cname, long_cname)

        '''        
        if stop_signal_comes():
            exit(0)
        pass

        ## testing, check file_infos:
        #popup( fi['filename'])
        #popup( fi['fullfilename'])
        #popup(fi['chinese_title'])
        #popup(fi['longtitle'])

        with open('/tmp/ttesta', 'wb') as testfile:
        for fi in file_infos:
            testfile.write( fi['filename'] + "\n")
            testfile.write( fi['chinese_title'] + "\n")

            print fi['filename']
            print fi['fullfilename']
            print fi['chinese_title']
            print fi['longtitle']
        '''
    pass


def loop_over_folders():
    """This automatically loop over all folders in 'base_folder'
    """
    folder = get_folder(base_folder)
    while folder:
        # do one folder, and stop at stop signal:
        #popup( "do one folder: %s"%folder)
        folder = os.path.normpath(folder)
        do_one_folder(folder)
        shutil.rmtree(folder)

        folder = get_folder(base_folder)
        pass
    pass


##########################
### tests:


def test_config():
    popup( "log_filename: %s"%log_filename)
    popup( "todo_filename: %s"%todo_filename)
    popup( "chinese_title_filename: %s"%chinese_title_filename)

    config.set('working_log', 'filename', 'thatisthefilename')
    config.set('working_log', 'timelog', get_asctime())
    write_working_log()
    pass




### comment out after testing:
'''
fp = get_file_provider()
#print fp
#print fp.is_in_folder('/tmp/aac', '/tmp/')
fnb = fp.pop_one_full_filename()
vinfo = fp.get_video_info(fnb)
'''


### do the job:


'''
wait(0)
'''

#upload_loop()


